{"version":3,"sources":["components/Firebase/context.jsx","App.jsx","serviceWorker.js","components/Firebase/firebase.js","index.jsx"],"names":["FirebaseContext","React","createContext","withFirebase","Component","props","react_default","a","createElement","Consumer","firebase","Object","assign","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","restaurants","inDeliveryOrders","inPlaceOrders","loading","_this2","setState","on","val","_","toArray","off","_this$state","currentTime","moment","Date","deliveryStartTime","deliveryIsOpen","isAfter","style","textAlign","paddingTop","width","float","App_UserList","orders","name","color","fontSize","UserList","_ref","className","map","_ref2","ShoppingCartGuid","Payments","RestaurantId","usersNames","_ref3","UserName","_restaurants$Restaura","restaurantLogoUrl","restaurantName","key","padding","src","height","alt","display","flexDirection","justifyContent","paddingLeft","join","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","storageBucket","Firebase","db","ref","app","initializeApp","database","__webpack_require__","d","__webpack_exports__","context","context_withFirebase","ReactDOM","render","Provider","value","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13bd1c80.chunk.js","sourcesContent":["import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n  <FirebaseContext.Consumer>\n    {firebase => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport './App.css';\n\nimport { withFirebase } from './components/Firebase/context';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            restaurants: [],\n            inDeliveryOrders: [],\n            inPlaceOrders: [],\n            loading: false,\n        };\n    }\n\n    componentDidMount() {\n        const { firebase } = this.props;\n\n        this.setState({ loading: true });\n\n        firebase.restaurants().on('value', (restaurants) => {\n            firebase.inDeliveryOrders().on('value', (inDeliveryOrders) => {\n                firebase.inPlaceOrders().on('value', (inPlaceOrders) => {\n                    this.setState({\n                        restaurants: restaurants.val(),\n                        inDeliveryOrders: _.toArray(inDeliveryOrders.val()),\n                        inPlaceOrders: _.toArray(inPlaceOrders.val()),\n                        loading: false,\n                    });\n                });\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.restaurants().off();\n        this.props.firebase.inDeliveryOrders().off();\n        this.props.firebase.inPlaceOrders().off();\n    }\n\n    render() {\n        const { loading, inDeliveryOrders, inPlaceOrders, restaurants } = this.state;\n        const currentTime = moment(new Date(), 'HH:mm a');\n        const deliveryStartTime = moment('11:00a', 'HH:mm a');\n\n        const deliveryIsOpen = currentTime.isAfter(deliveryStartTime);\n\n        return (\n            <div>\n                {\n                    loading ?\n                         <div>Loading...</div> : deliveryIsOpen ? (\n                            <div style={{ textAlign: 'center', paddingTop: '20px' }}>\n                                <div style={{width: '50%', float: 'left'}}>\n                                    <UserList orders={inPlaceOrders} name={'IN PLACE'} color='#4caf50' restaurants={restaurants}/>\n                                </div>\n                                <div style={{width: '50%', float: 'right'}}>\n                                    <UserList orders={inDeliveryOrders} name={'IN DELIVERY'} color='#ffc107' restaurants={restaurants}/>\n                                </div>\n                            </div>\n                        ) :\n                        <div style={{textAlign: 'center', fontSize: 80, paddingTop: 300}}>\n                            <strong>This service is starting at <br />11:00 AM</strong>\n                        </div>\n                }\n            </div>\n        );\n    }\n}\n\nconst UserList = ({ orders, name, restaurants, color }) => (\n    <div>\n        <div className=\"title\" style={{ color, textAlign: 'center', fontSize: '50px'}}><strong>{name}</strong></div>\n        {_.map(orders, ({ ShoppingCartGuid, Payments, RestaurantId }) => {\n\n            const usersNames = _.map(Payments, ({UserName}) => UserName);\n            const { restaurantLogoUrl, restaurantName } = restaurants[RestaurantId];\n\n            return (\n            <div key={ShoppingCartGuid} className=\"item\">\n                <div style={{padding: '10px'}}>\n                    <img src={restaurantLogoUrl} width={150} height={150} alt=\"icon\"/>\n                </div>\n                <div style={{ display:'flex', flexDirection: 'column', justifyContent: 'space-evenly', paddingLeft: '50px'}}>\n                    <div style={{fontSize: '32px'}}>\n                        <strong>{restaurantName}</strong>\n                    </div>\n                    <div style={{color: '#8B8585', fontSize: '22px'}}>\n                        {usersNames.join(', ')}\n                    </div>\n                </div>\n            </div>\n        )})}\n    </div>\n);\n\nexport default withFirebase(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import app from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: \"AIzaSyAVw8nOjCCOYAjEMrJOcDc\",\n  authDomain: \"gues10-bis-viewer.firebaseapp.com\",\n  databaseURL: \"https://gues10-bis.firebaseio.com\",\n  storageBucket: \"gues10-bis.appspot.com\",\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    this.db = app.database();\n  }\n\n  inDeliveryOrders = () => this.db.ref('inDelivery');\n  inPlaceOrders = () => this.db.ref('inPlace');\n  restaurants = () => this.db.ref('restaurants');\n}\n\nexport default Firebase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport FirebaseContext, { withFirebase } from './components/Firebase/context';\nimport Firebase from './components/Firebase/firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\nexport { FirebaseContext, withFirebase };\n\nserviceWorker.unregister();\n"],"sourceRoot":""}